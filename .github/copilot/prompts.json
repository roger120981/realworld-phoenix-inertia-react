{
  "projectRules": [
    "When working with the Ash framework, never make assumptions about function names or module structures.",
    "Always verify functions exist in the Ash documentation before suggesting them.",
    "Use the Ash.Resource.Info module for introspection of resources, particularly Ash.Resource.Info.resource?/1 to check if a module is an Ash resource.",
    "For resource serialization, use Ash.Resource.Info.public_attributes/1 and Ash.Resource.Info.public_relationships/1.",
    "When suggesting code changes, ensure proper error handling, especially when interacting with external modules.",
    "Before implementing a solution, check modules and functions used actually exist.",
    "When converting a string to a module name, always use Module.concat/1 or Module.concat/2, not String.to_atom/1.",
    "To patch a module in Igniter, use Igniter.Project.Module.find_and_update_module instead of assuming the path to the module.",
    "When pattern matching on the result of a function call, check the @spec in the documentation to confirm the shape of the return value.",
    "For navigating to 'do' blocks in Igniter, use Igniter.Code.Common.move_to_do_block/1, not Igniter.Code.Function.move_to_do_block/1.",
    "Never add @doc strings to private functions",
    "Generate small functions that abide by the 'single level of abstraction' principle",
    "Never use the 'unless' expression as it is deprecated in Elixir; use 'if not' or 'if !' instead"
  ],
  "prompts": [
    {
      "name": "Ash Framework Assistance",
      "description": "Get help with Ash Framework code",
      "prompt": "You are an expert in the Ash Framework for Elixir. Help me with the following code in our project. Remember that Ash is a declarative, resource-based framework with unique patterns and APIs. Verify any suggestions against the Ash documentation before providing them.",
      "isDefault": true
    }
  ],
  "rules": [
    {
      "description": "Pattern matching for Elixir function heads",
      "pattern": "When implementing multiple function heads in Elixir, ensure pattern matching follows proper precedence rules and covers all possible input scenarios."
    },
    {
      "description": "Ash Framework calculation modules",
      "pattern": "When implementing Ash.Resource.Calculation modules, always use 'use Ash.Resource.Calculation' (not a submodule) and implement the @impl true calculate/3 callback with pattern matching for different actor scenarios (nil actor, present actor, and fallback)."
    },
    {
      "description": "Ash calculation context handling",
      "pattern": "In Ash calculations, access the actor through the context parameter (third parameter) rather than using functions like actor(). Pattern match on %{actor: nil} and %{actor: actor} for proper handling of anonymous users."
    },
    {
      "description": "Expression vs. module-based calculations in Ash",
      "pattern": "For complex Ash calculations that need to handle nil values or optional data, prefer module-based calculations over expression-based calculations. This is especially important when dealing with actors and relationships."
    },
    {
      "description": "Elixir module behavior implementation",
      "pattern": "When implementing a behavior in Elixir, first check the behavior definition to understand required callbacks. Use @impl true annotations and ensure all required callbacks are implemented."
    },
    {
      "description": "Safe nil handling in Elixir",
      "pattern": "For nil checking in Elixir, use is_nil/1 or pattern matching (%{key: nil}) rather than comparing with == nil, as the latter can lead to unexpected results."
    }
  ]
}
